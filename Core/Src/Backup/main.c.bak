/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "rtc.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
sys_t system_exec = {
    .mode = SYS_NORMAL_MODE,
    .ms_ticks = 0,
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void system_run(void);
void normal_mode(void);
void system_init(void);

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_RTC_Init();
  MX_I2C2_Init();
  MX_SPI1_Init();
  MX_USART5_UART_Init();
  MX_USART6_UART_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  HAL_SYSTICK_Config(167978); /*168000-22,firing every milli second with correction factor 22 (measured) */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
  system_init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void system_run(void)
{

  switch (system_exec.mode)
  {
  case SYS_NORMAL_MODE:
  {
    normal_mode();
  }
  break;
  case SYS_LOW_POWER_MODE:
  {
  }
  break;
  case SYS_RESTART_MODE:
  {
  }
  break;
  case SYS_BOOTING_MODE:
  {
  }
  break;
  }
}

void normal_mode(void)
{

  while (SYS_NORMAL_MODE == system_exec.mode)
  {
    if (system_exec.ms_ticks > 0)
    {
      basetimer_scheduling_process();
    }
    switch (GetTaskFromQue())
    {
    case TASK_READ_RTC:
    {
      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
      HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
      printmsg("Time ::    %2d      :%2d     : %2d  \r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
      printmsg("Date ::    %4d    :%2d     : %2d  \r\n", sDate.Year == 0 ? sDate.Year : sDate.Year + 2000, sDate.Month, sDate.Date);
      printmsg("----------------------------------------\r\n");
    }
    break;
    case TASK_CHECK_DISCRETES_PROC:
    {
      solenoid_FB_check();
    }
    break;
    case TASK_SOLENOID_CONTROL_PROC:
    {
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
      solenoid_control_proc();
    }
    break;
    case TASK_OPEN_SOLENOID:
    {
    }
    break;
    case TASK_SOLENOID_ACT_PROC:
    {
      solenoid_status_config_cmp_act();
    }
    break;
    case TASK_RS485_PROC:
    {
    }
    break;
    case TASK_DLMS_PROC:
    {
      dlms_MainFunction();
    }
    break;
    case TASK_BILLING_PROC:
    {
      billing_updateOffDays();
      if (billing_isNewBillingCycle())
      {
        billing_closeCurrentBillingCycle();
        if (billing_isTariffActivationTime())
        {
          billing_ActivateNewTariff();
        }
      }
    }
    break;
    case TASK_EEPROM_READ_BACK:
    {
      eeprom_retrieve_saved_objects();
    }
    break;
    case TASK_EEPROM_DYNAMIC_SAVE:
    {
      dynamic_saving();
    }
    break;
    case TASK_EEPROM_CLEAR_DATA:
    {
      eeprom_clear_all_data();
    }
    break;
    case TASK_TEST_TIMING_100MS:
    {
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
    }
    break;
    case TASK_TEST_TIMING_300MS:
    {
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
    }
    break;
    case TASK_TEST_TIMING_500MS:
    {
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
    }
    break;
    }
  }
}
void system_init(void)
{
  //GSM_init();
  rs485_Init();
  solenoid_init();
  int32_t init_ret = DLMS_FAIL;
  init_ret = dlms_server_init();
  BSP_E2promBus_Init();
  eeprom_init_saved_object();
  eeprom_retrieve_lookup_table();
  PutTaskIntoQue(TASK_EEPROM_READ_BACK);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
